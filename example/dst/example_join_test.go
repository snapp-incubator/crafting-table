// Code generated by Crafting-Table.
// Source code: https://github.com/snapp-incubator/crafting-table

package repository

import (
	"context"
	"database/sql"
	"errors"
	"testing"

	"github.com/DATA-DOG/go-sqlmock"
	"github.com/bxcodec/faker/v3"
	"github.com/jmoiron/sqlx"
	"github.com/snapp-incubator/crafting-table/example/src"
	"github.com/stretchr/testify/suite"
)

type JoinExampleRepositoryTestSuite struct {
	suite.Suite
	db   *sql.DB
	mock sqlmock.Sqlmock
	repo *mysqlJoinExample
}

func (suite *JoinExampleRepositoryTestSuite) SetupSuite() {
	require := suite.Require()
	var err error

	suite.db, suite.mock, err = sqlmock.New()
	require.NoError(err)

	suite.repo = &mysqlJoinExample{
		db: sqlx.NewDb(suite.db, "mysql"),
	}
}

//-----------------------------------------------------------------
//							JOIN
//-----------------------------------------------------------------

func (suite *JoinExampleRepositoryTestSuite) TestGetJoinedJoinExample_Success() {
	require := suite.Require()
	limit := uint(1)

	var joinExample src.JoinExample
	errFakeData := faker.FakeData(&joinExample)
	require.NoError(errFakeData)

	rows := sqlmock.NewRows([]string{
		"var10",
		"var11",
		"var12",
		"var1",
		"var9",
		"var13.var1",
		"var13.var2",
		"var13.var3",
		"var13.var4",
	}).
		AddRow(
			"joinExample.var9",
			"joinExample.var10",
			"joinExample.var11",
			"joinExample.var12",
			"joinExample.var1",
			"joinExample.Var13.var2",
			"joinExample.Var13.var3",
			"joinExample.Var13.var4",
			"joinExample.Var13.var1",
		)

	query := "SELECT " +
		"j.var11 AS var11, " +
		"j.var12 AS var12, " +
		"j.var13 AS var13, " +
		"j.var1 AS var1, " +
		"j.var9 AS var9, " +
		"j.var10 AS var10, " +
		"e.var1 AS \"var13.var1\", " +
		"e.var2 AS \"var13.var2\", " +
		"e.var3 AS \"var13.var3\", " +
		"e.var4 AS \"var13.var4\" " +
		"FROM join_example AS j " +
		"LEFT OUTER JOIN example AS e ON j.var1 = e.var1 " +
		"LIMIT ?"

	suite.mock.ExpectQuery(query).
		WithArgs(limit).
		WillReturnRows(rows)

	data, err := suite.repo.GetJoinedJoinExample(context.Background(), limit)
	require.NoError(err)
	require.Equal(&joinExample, data)
	require.NoError(suite.mock.ExpectationsWereMet())
}

func (suite *JoinExampleRepositoryTestSuite) TestGetJoinedJoinExample_Failure() {
	require := suite.Require()
	limit := uint(1)
	expectedError := errors.New("something went wrong")

	query := "SELECT " +
		"j.var10 AS var10, " +
		"j.var11 AS var11, " +
		"j.var12 AS var12, " +
		"j.var13 AS var13, " +
		"j.var1 AS var1, " +
		"j.var9 AS var9, " +
		"e.var1 AS \"var13.var1\", " +
		"e.var2 AS \"var13.var2\", " +
		"e.var3 AS \"var13.var3\", " +
		"e.var4 AS \"var13.var4\" " +
		"FROM join_example AS j " +
		"LEFT OUTER JOIN example AS e ON j.var1 = e.var1 " +
		"LIMIT ?"

	suite.mock.ExpectQuery(query).
		WithArgs(limit).
		WillReturnError(expectedError)

	data, err := suite.repo.GetJoinedJoinExample(context.Background(), limit)
	require.Equal(expectedError, err)
	require.Nil(data)
	require.NoError(suite.mock.ExpectationsWereMet())
}

//-----------------------------------------------------------------
//						 RUN ALL TESTS
//-----------------------------------------------------------------

func TestJoinExampleRepository(t *testing.T) {
	suite.Run(t, new(JoinExampleRepositoryTestSuite))
}
