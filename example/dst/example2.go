// Code generated by Crafting-Table.
// Source code: https://github.com/snapp-incubator/crafting-table

package test_repository

import (
	"context"
	"database/sql"
	"errors"

	"github.com/jmoiron/sqlx"
	"github.com/snapp-incubator/crafting-table/example/src"
)

type Example2 interface {
	GetExample2s(ctx context.Context) (*[]src.Example2, error)
	GetByVar5AndVar6(ctx context.Context, var5 int, var6 string) (*src.Example2, error)
	GetByVar5AndVar7AndVar8(ctx context.Context, var5 int, var7 bool, var8 bool) (*src.Example2, error)
	GetByVar8(ctx context.Context, var8 bool) (*src.Example2, error)
	Update(ctx context.Context, var5 int, example2 src.Example2) (int64, error)
	UpdateVar6(ctx context.Context, var5 int, var7 bool, var6 string) (int64, error)
	UpdateVar5AndVar6(ctx context.Context, var8 bool, var5 int, var6 string) (int64, error)
}

var ErrExample2NotFound = errors.New("example 2 not found")

type mysqlExample2 struct {
	db *sqlx.DB
}

func NewMySQLExample2(db *sqlx.DB) Example2 {
	return &mysqlExample2{db: db}
}

func (r *mysqlExample2) Update(ctx context.Context, var5 int, example2 src.Example2) (int64, error) {
	example2.Var5 = var5

	result, err := r.db.NamedExecContext(ctx, "UPDATE example_2 "+
		"SET "+
		"var5 = :var5, var6 = :var6, var7 = :var7, var8 = :var8 "+
		"WHERE var5 = :var5",
		example2,
	)

	if err != nil {
		return 0, err
	}

	return result.RowsAffected()
}

func (r *mysqlExample2) UpdateVar6(ctx context.Context, var5 int, var7 bool, var6 string) (int64, error) {
	query := "UPDATE example_2 SET " +
		"var6 = ? " +
		"WHERE var5 = ? AND var7 = ?;"

	result, err := r.db.ExecContext(ctx, query, var6, var5, var7)

	if err != nil {
		return 0, err
	}

	return result.RowsAffected()
}

func (r *mysqlExample2) UpdateVar5AndVar6(ctx context.Context, var8 bool, var5 int, var6 string) (int64, error) {
	query := "UPDATE example_2 SET " +
		"var5 = ?, var6 = ? " +
		"WHERE var8 = ?;"

	result, err := r.db.ExecContext(ctx, query, var5, var6, var8)

	if err != nil {
		return 0, err
	}

	return result.RowsAffected()
}

func (r *mysqlExample2) GetExample2s(ctx context.Context) (*[]src.Example2, error) {
	var example2 []src.Example2
	err := r.db.SelectContext(ctx, &example2, "SELECT * from example_2")
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrExample2NotFound
		}

		return nil, err
	}

	return &example2, nil
}

func (r *mysqlExample2) GetByVar5AndVar6(ctx context.Context, var5 int, var6 string) (*src.Example2, error) {
	var example2 src.Example2

	err := r.db.GetContext(ctx, &example2, "SELECT * FROM example_2 "+
		"WHERE var5 = ? AND var6 = ?",
		var5, var6,
	)

	if err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrExample2NotFound
		}

		return nil, err
	}

	return &example2, nil
}

func (r *mysqlExample2) GetByVar5AndVar7AndVar8(ctx context.Context, var5 int, var7 bool, var8 bool) (*src.Example2, error) {
	var example2 src.Example2

	err := r.db.GetContext(ctx, &example2, "SELECT * FROM example_2 "+
		"WHERE var5 = ? AND var7 = ? AND var8 = ?",
		var5, var7, var8,
	)

	if err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrExample2NotFound
		}

		return nil, err
	}

	return &example2, nil
}

func (r *mysqlExample2) GetByVar8(ctx context.Context, var8 bool) (*src.Example2, error) {
	var example2 src.Example2

	err := r.db.GetContext(ctx, &example2, "SELECT * FROM example_2 "+
		"WHERE var8 = ?",
		var8,
	)

	if err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrExample2NotFound
		}

		return nil, err
	}

	return &example2, nil
}
