// Code generated by Crafting-Table.
// Source code: https://github.com/snapp-incubator/crafting-table

package repository

import (
	"context"
	"database/sql"
	"errors"

	"github.com/jmoiron/sqlx"
	"github.com/snapp-incubator/crafting-table/example/src"
)

type ExampleJoin interface {
	GetJoinedExampleJoin(ctx context.Context, limit uint) ([]src.ExampleJoin, error)
}

var ErrExampleJoinNotFound = errors.New("example join not found")

type mysqlExampleJoin struct {
	db *sqlx.DB
}

func NewMySQLExampleJoin(db *sqlx.DB) ExampleJoin {
	return &mysqlExampleJoin{db: db}
}

func (r *mysqlExampleJoin) GetJoinedExampleJoin(ctx context.Context, limit uint) ([]src.ExampleJoin, error) {
	query := "SELECT " +
		"e.var9 AS var9, " +
		"e.var10 AS var10, " +
		"e.var11 AS var11, " +
		"e.var12 AS var12, " +
		"e.var13 AS var13, " +
		"e.var1 AS var1, " +
		"e.var1 AS \"var13.var1\", " +
		"e.var2 AS \"var13.var2\", " +
		"e.var3 AS \"var13.var3\", " +
		"e.var4 AS \"var13.var4\" " +
		"FROM example_join AS e " +
		"LEFT OUTER JOIN example AS e ON e.var1 = e.var1 " +
		"LIMIT ?"

	var exampleJoin []src.ExampleJoin
	err := r.db.SelectContext(ctx, &exampleJoin, query, limit)

	if err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrExampleJoinNotFound
		}

		return nil, err
	}

	return exampleJoin, nil
}
