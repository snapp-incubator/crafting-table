// Code generated by Crafting-Table.
// Source code: https://github.com/snapp-incubator/crafting-table

package test_repository

import (
	"context"
	"database/sql"
	"errors"
	"testing"

	"github.com/DATA-DOG/go-sqlmock"
	"github.com/bxcodec/faker/v3"
	"github.com/jmoiron/sqlx"
	"github.com/snapp-incubator/crafting-table/example/src"
	"github.com/stretchr/testify/suite"
)

type Example2RepositoryTestSuite struct {
	suite.Suite
	db   *sql.DB
	mock sqlmock.Sqlmock
	repo *mysqlExample2
}

func (suite *Example2RepositoryTestSuite) SetupSuite() {
	require := suite.Require()
	var err error

	suite.db, suite.mock, err = sqlmock.New()
	require.NoError(err)

	suite.repo = &mysqlExample2{
		db: sqlx.NewDb(suite.db, "mysql"),
	}
}

//-----------------------------------------------------------------
//							UPDATE
//-----------------------------------------------------------------

func (suite *Example2RepositoryTestSuite) TestUpdate_Success() {
	require := suite.Require()

	expRowsAffected := int64(1)

	var example2 src.Example2
	errFakeData := faker.FakeData(&example2)
	require.NoError(errFakeData)

	sqlmock.NewRows([]string{
		"var5",
		"var6",
		"var7",
		"var8",
	}).
		AddRow(
			example2.Var5,
			example2.Var6,
			example2.Var7,
			example2.Var8,
		)

	syntax := "UPDATE example_2 SET .+"
	suite.mock.ExpectExec(syntax).
		WithArgs(
			example2.Var5,
			example2.Var6,
			example2.Var7,
			example2.Var8,
		).
		WillReturnResult(sqlmock.NewResult(int64(1), expRowsAffected))

	rowsAffected, err := suite.repo.Update(context.Background(), example2.Var5, example2)
	require.NoError(err)
	require.Equal(expRowsAffected, rowsAffected)
	require.NoError(suite.mock.ExpectationsWereMet())
}

func (suite *Example2RepositoryTestSuite) TestUpdate_Failure() {
	require := suite.Require()

	expectedError := errors.New("something went wrong")

	var example2 src.Example2
	errFakeData := faker.FakeData(&example2)
	require.NoError(errFakeData)

	expectedRowsAffected := int64(0)

	syntax := "UPDATE example_2 SET .+"
	suite.mock.ExpectExec(syntax).
		WithArgs(
			example2.Var5,
			example2.Var6,
			example2.Var7,
			example2.Var8,
		).
		WillReturnError(expectedError)

	rowsAffected, err := suite.repo.Update(context.Background(), example2.Var5, example2)
	require.EqualError(err, expectedError.Error())
	require.Equal(expectedRowsAffected, rowsAffected)
	require.NoError(suite.mock.ExpectationsWereMet())
}

func (suite *Example2RepositoryTestSuite) TestUpdateVar5AndVar6_Success() {
	require := suite.Require()

	expRowsAffected := int64(1)

	var example2 src.Example2
	errFakeData := faker.FakeData(&example2)
	require.NoError(errFakeData)

	sqlmock.NewRows([]string{
		"var5",
		"var6",
		"var7",
		"var8",
	}).
		AddRow(
			example2.Var5,
			example2.Var6,
			example2.Var7,
			example2.Var8,
		)

	syntax := "UPDATE example_2 SET (.+) WHERE (.+)"
	suite.mock.ExpectExec(syntax).
		WithArgs(
			example2.Var5,
			example2.Var6,
			example2.Var8,
		).
		WillReturnResult(sqlmock.NewResult(int64(1), expRowsAffected))

	rowsAffected, err := suite.repo.UpdateVar5AndVar6(
		context.Background(),
		example2.Var8,
		example2.Var5,
		example2.Var6,
	)
	require.NoError(err)
	require.Equal(rowsAffected, expRowsAffected)
	require.NoError(suite.mock.ExpectationsWereMet())
}

func (suite *Example2RepositoryTestSuite) TestUpdateVar5AndVar6_Failure() {
	require := suite.Require()

	expectedError := errors.New("something went wrong")

	var example2 src.Example2
	errFakeData := faker.FakeData(&example2)
	require.NoError(errFakeData)

	expRowsAffected := int64(0)

	syntax := "UPDATE example_2 SET (.+) WHERE (.+)"
	suite.mock.ExpectExec(syntax).
		WithArgs(
			example2.Var5,
			example2.Var6,
			example2.Var8,
		).
		WillReturnError(expectedError)

	rowsAffected, err := suite.repo.UpdateVar5AndVar6(
		context.Background(),
		example2.Var8,
		example2.Var5,
		example2.Var6,
	)
	require.Equal(expectedError, err)
	require.Equal(rowsAffected, expRowsAffected)
	require.NoError(suite.mock.ExpectationsWereMet())
}

//-----------------------------------------------------------------
//							GET
//-----------------------------------------------------------------

func (suite *Example2RepositoryTestSuite) TestGetByVar8_Success() {
	require := suite.Require()

	var example2 src.Example2
	errFakeData := faker.FakeData(&example2)
	require.NoError(errFakeData)

	rows := sqlmock.NewRows([]string{
		"var5",
		"var6",
		"var7",
		"var8",
	}).
		AddRow(
			example2.Var5,
			example2.Var6,
			example2.Var7,
			example2.Var8,
		)

	syntax := "SELECT .+ FROM example_2 WHERE .+"
	suite.mock.ExpectQuery(syntax).
		WithArgs(
			example2.Var8,
		).
		WillReturnRows(rows)

	data, err := suite.repo.GetByVar8(
		context.Background(),
		example2.Var8,
	)
	require.NoError(err)
	require.Equal(example2, data)
	require.NoError(suite.mock.ExpectationsWereMet())
}

func (suite *Example2RepositoryTestSuite) TestGetByVar8_NotFoundErr_Failure() {
	require := suite.Require()

	expectedError := ErrExample2NotFound

	var example2 src.Example2
	errFakeData := faker.FakeData(&example2)
	require.NoError(errFakeData)

	syntax := "SELECT (.+) FROM example_2 WHERE (.+) "
	suite.mock.ExpectQuery(syntax).
		WithArgs(
			example2.Var8,
		).
		WillReturnError(expectedError)

	data, err := suite.repo.GetByVar8(
		context.Background(),
		example2.Var8,
	)
	require.Equal(expectedError, err)
	require.Nil(data)
	require.NoError(suite.mock.ExpectationsWereMet())
}

func (suite *Example2RepositoryTestSuite) TestGetByVar8_OtherErr_Failure() {
	require := suite.Require()

	expectedError := errors.New("something went wrong")

	var example2 src.Example2
	errFakeData := faker.FakeData(&example2)
	require.NoError(errFakeData)

	syntax := "SELECT (.+) FROM example_2 WHERE (.+) "
	suite.mock.ExpectQuery(syntax).
		WithArgs(
			example2.Var8,
		).
		WillReturnError(expectedError)

	data, err := suite.repo.GetByVar8(
		context.Background(),
		example2.Var8,
	)
	require.Equal(expectedError, err)
	require.Nil(data)
	require.NoError(suite.mock.ExpectationsWereMet())
}

//-----------------------------------------------------------------
//						 RUN ALL TESTS
//-----------------------------------------------------------------

func TestExample2Repository(t *testing.T) {
	suite.Run(t, new(Example2RepositoryTestSuite))
}
