// Code generated by Crafting-Table.
// Source code: https://github.com/snapp-incubator/crafting-table

package repository

import (
	"context"
	"database/sql"
	"errors"
	"testing"

	"github.com/DATA-DOG/go-sqlmock"
	"github.com/bxcodec/faker/v3"
	"github.com/jmoiron/sqlx"
	"github.com/snapp-incubator/crafting-table/example/src"
	"github.com/stretchr/testify/suite"
)

type ExampleRepositoryTestSuite struct {
	suite.Suite
	db   *sql.DB
	mock sqlmock.Sqlmock
	repo *mysqlExample
}

func (suite *ExampleRepositoryTestSuite) SetupTest() {
	require := suite.Require()
	var err error

	suite.db, suite.mock, err = sqlmock.New()
	require.NoError(err)

	suite.repo = &mysqlExample{
		db: sqlx.NewDb(suite.db, "mysql"),
	}
}

//-----------------------------------------------------------------
//							INSERT
//-----------------------------------------------------------------

func (suite *ExampleRepositoryTestSuite) TestInsert_Success() {
	require := suite.Require()

	expRowsAffected := int64(1)

	var example src.Example
	errFakeData := faker.FakeData(&example)
	require.NoError(errFakeData)

	syntax := "INSERT INTO example .+"
	suite.mock.ExpectExec(syntax).
		WithArgs(
			example.Var1,
			example.Var2,
			example.Var3,
			example.Var4,
		).
		WillReturnResult(sqlmock.NewResult(int64(1), expRowsAffected))

	err := suite.repo.Insert(
		context.Background(),
		&example,
	)
	require.NoError(err)
	require.NoError(suite.mock.ExpectationsWereMet())
}

func (suite *ExampleRepositoryTestSuite) TestInsert_Failure() {
	require := suite.Require()

	expectedError := errors.New("something went wrong")

	var example src.Example
	errFakeData := faker.FakeData(&example)
	require.NoError(errFakeData)

	syntax := "INSERT INTO example (.+) VALUES (.+)"
	suite.mock.ExpectExec(syntax).
		WithArgs(
			example.Var1,
			example.Var2,
			example.Var3,
			example.Var4,
		).
		WillReturnError(expectedError)

	err := suite.repo.Insert(
		context.Background(),
		&example,
	)
	require.Equal(expectedError, err)
	require.NoError(suite.mock.ExpectationsWereMet())
}

//-----------------------------------------------------------------
//							UPDATE
//-----------------------------------------------------------------

func (suite *ExampleRepositoryTestSuite) TestUpdate_Success() {
	require := suite.Require()

	expRowsAffected := int64(1)

	var example src.Example
	errFakeData := faker.FakeData(&example)
	require.NoError(errFakeData)

	syntax := "UPDATE example SET .+"
	suite.mock.ExpectExec(syntax).
		WithArgs(
			example.Var1,
			example.Var2,
			example.Var3,
			example.Var4,
		).
		WillReturnResult(sqlmock.NewResult(int64(1), expRowsAffected))

	rowsAffected, err := suite.repo.Update(context.Background(), example.Var1, example)
	require.NoError(err)
	require.Equal(expRowsAffected, rowsAffected)
	require.NoError(suite.mock.ExpectationsWereMet())
}

func (suite *ExampleRepositoryTestSuite) TestUpdate_Failure() {
	require := suite.Require()

	expectedError := errors.New("something went wrong")

	var example src.Example
	errFakeData := faker.FakeData(&example)
	require.NoError(errFakeData)

	expectedRowsAffected := int64(0)

	syntax := "UPDATE example SET .+"
	suite.mock.ExpectExec(syntax).
		WithArgs(
			example.Var1,
			example.Var2,
			example.Var3,
			example.Var4,
		).
		WillReturnError(expectedError)

	rowsAffected, err := suite.repo.Update(context.Background(), example.Var1, example)
	require.EqualError(err, expectedError.Error())
	require.Equal(expectedRowsAffected, rowsAffected)
	require.NoError(suite.mock.ExpectationsWereMet())
}

func (suite *ExampleRepositoryTestSuite) TestUpdateVar2AndVar3_Success() {
	require := suite.Require()

	expRowsAffected := int64(1)

	var example src.Example
	errFakeData := faker.FakeData(&example)
	require.NoError(errFakeData)

	syntax := "UPDATE example SET (.+) WHERE (.+)"
	suite.mock.ExpectExec(syntax).
		WithArgs(
			example.Var2,
			example.Var3,
			example.Var4,
		).
		WillReturnResult(sqlmock.NewResult(int64(1), expRowsAffected))

	rowsAffected, err := suite.repo.UpdateVar2AndVar3(
		context.Background(),
		example.Var4,
		example.Var2,
		example.Var3,
	)
	require.NoError(err)
	require.Equal(rowsAffected, expRowsAffected)
	require.NoError(suite.mock.ExpectationsWereMet())
}

func (suite *ExampleRepositoryTestSuite) TestUpdateVar2AndVar3_Failure() {
	require := suite.Require()

	expectedError := errors.New("something went wrong")

	var example src.Example
	errFakeData := faker.FakeData(&example)
	require.NoError(errFakeData)

	expRowsAffected := int64(0)

	syntax := "UPDATE example SET (.+) WHERE (.+)"
	suite.mock.ExpectExec(syntax).
		WithArgs(
			example.Var2,
			example.Var3,
			example.Var4,
		).
		WillReturnError(expectedError)

	rowsAffected, err := suite.repo.UpdateVar2AndVar3(
		context.Background(),
		example.Var4,
		example.Var2,
		example.Var3,
	)
	require.Equal(expectedError, err)
	require.Equal(rowsAffected, expRowsAffected)
	require.NoError(suite.mock.ExpectationsWereMet())
}

//-----------------------------------------------------------------
//							GET
//-----------------------------------------------------------------

func (suite *ExampleRepositoryTestSuite) TestGetByVar3_Success() {
	require := suite.Require()

	var example src.Example
	errFakeData := faker.FakeData(&example)
	require.NoError(errFakeData)

	rows := sqlmock.NewRows([]string{
		"var1",
		"var2",
		"var3",
		"var4",
	}).
		AddRow(
			example.Var1,
			example.Var2,
			example.Var3,
			example.Var4,
		)

	syntax := "SELECT .+ FROM example WHERE .+"
	suite.mock.ExpectQuery(syntax).
		WithArgs(
			example.Var3,
		).
		WillReturnRows(rows)

	data, err := suite.repo.GetByVar3(
		context.Background(),
		example.Var3,
	)
	require.NoError(err)
	require.Equal(example, data)
	require.NoError(suite.mock.ExpectationsWereMet())
}

func (suite *ExampleRepositoryTestSuite) TestGetByVar3_NotFoundErr_Failure() {
	require := suite.Require()

	expectedError := ErrExampleNotFound

	var example src.Example
	errFakeData := faker.FakeData(&example)
	require.NoError(errFakeData)

	syntax := "SELECT (.+) FROM example WHERE (.+) "
	suite.mock.ExpectQuery(syntax).
		WithArgs(
			example.Var3,
		).
		WillReturnError(expectedError)

	data, err := suite.repo.GetByVar3(
		context.Background(),
		example.Var3,
	)
	require.Equal(expectedError, err)
	require.Nil(data)
	require.NoError(suite.mock.ExpectationsWereMet())
}

func (suite *ExampleRepositoryTestSuite) TestGetByVar3_OtherErr_Failure() {
	require := suite.Require()

	expectedError := errors.New("something went wrong")

	var example src.Example
	errFakeData := faker.FakeData(&example)
	require.NoError(errFakeData)

	syntax := "SELECT (.+) FROM example WHERE (.+) "
	suite.mock.ExpectQuery(syntax).
		WithArgs(
			example.Var3,
		).
		WillReturnError(expectedError)

	data, err := suite.repo.GetByVar3(
		context.Background(),
		example.Var3,
	)
	require.Equal(expectedError, err)
	require.Nil(data)
	require.NoError(suite.mock.ExpectationsWereMet())
}

//-----------------------------------------------------------------
//							AGGREGATE
//-----------------------------------------------------------------

func (suite *ExampleRepositoryTestSuite) TestGetAggregateByVar1_Failure() {
	require := suite.Require()

	expectedError := errors.New("something went wrong")

	var example src.Example
	errFakeData := faker.FakeData(&example)
	require.NoError(errFakeData)

	syntax := "SELECT (.+) FROM example (.+) "
	suite.mock.ExpectQuery(syntax).
		WithArgs(
			example.Var1,
		).
		WillReturnError(expectedError)

	data, err := suite.repo.GetAggregateByVar1(
		context.Background(),
		example.Var1,
	)
	require.Equal(expectedError, err)
	require.Nil(data)
	require.NoError(suite.mock.ExpectationsWereMet())
}

func (suite *ExampleRepositoryTestSuite) TestGetAggregateByVar1_Success() {
	require := suite.Require()

	var example src.Example
	errFakeData := faker.FakeData(&example)
	require.NoError(errFakeData)

	rows := sqlmock.NewRows([]string{
		"count",
	}).
		AddRow(
			5,
		)

	syntax := "SELECT .+ FROM example .+"
	suite.mock.ExpectQuery(syntax).
		WithArgs(
			example.Var1,
		).
		WillReturnRows(rows)

	data, err := suite.repo.GetAggregateByVar1(
		context.Background(),
		example.Var1,
	)
	require.NoError(err)
	require.Equal(5, data)
	require.NoError(suite.mock.ExpectationsWereMet())
}

//-----------------------------------------------------------------
//						 RUN ALL TESTS
//-----------------------------------------------------------------

func TestExampleRepository(t *testing.T) {
	suite.Run(t, new(ExampleRepositoryTestSuite))
}
